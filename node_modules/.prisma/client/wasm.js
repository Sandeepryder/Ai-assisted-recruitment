
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  createdAt: 'createdAt',
  scoringKeywords: 'scoringKeywords'
};

exports.Prisma.CandidateScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  jobId: 'jobId',
  score: 'score',
  scoreBreakdown: 'scoreBreakdown',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.ResumeFileScalarFieldEnum = {
  id: 'id',
  candidateId: 'candidateId',
  filename: 'filename',
  path: 'path',
  mimetype: 'mimetype',
  size: 'size',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.ResumeParsedScalarFieldEnum = {
  id: 'id',
  candidateId: 'candidateId',
  text: 'text',
  keywords: 'keywords'
};

exports.Prisma.InterviewScalarFieldEnum = {
  id: 'id',
  candidateId: 'candidateId',
  scheduledAt: 'scheduledAt',
  interviewer: 'interviewer',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  candidateId: 'candidateId',
  interviewer: 'interviewer',
  rating: 'rating',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.ScoringConfigScalarFieldEnum = {
  id: 'id',
  name: 'name',
  config: 'config',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Job: 'Job',
  Candidate: 'Candidate',
  ResumeFile: 'ResumeFile',
  ResumeParsed: 'ResumeParsed',
  Interview: 'Interview',
  Feedback: 'Feedback',
  ScoringConfig: 'ScoringConfig'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\pc\\Desktop\\AI-assistent-recruitment\\API\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\pc\\Desktop\\AI-assistent-recruitment\\API\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file\n// Learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ndatasource db {\n  provider = \"postgresql\" // You can change this to \"mysql\" or \"sqlite\" if needed\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id        Int      @id @default(autoincrement())\n  email     String   @unique\n  password  String\n  role      String   @default(\"HR\")\n  createdAt DateTime @default(now())\n}\n\nmodel Job {\n  id              Int         @id @default(autoincrement())\n  title           String\n  description     String\n  createdAt       DateTime    @default(now())\n  candidates      Candidate[]\n  scoringKeywords Json?\n}\n\nmodel Candidate {\n  id             Int           @id @default(autoincrement())\n  firstName      String\n  lastName       String\n  email          String        @unique\n  phone          String?\n  jobId          Int\n  job            Job           @relation(fields: [jobId], references: [id])\n  resume         ResumeFile?\n  parsedResume   ResumeParsed?\n  score          Float?\n  scoreBreakdown Json?\n  status         String        @default(\"applied\")\n  createdAt      DateTime      @default(now())\n  interviews     Interview[]\n  feedbacks      Feedback[]\n}\n\nmodel ResumeFile {\n  id          Int       @id @default(autoincrement())\n  candidate   Candidate @relation(fields: [candidateId], references: [id])\n  candidateId Int       @unique\n  filename    String\n  path        String\n  mimetype    String\n  size        Int\n  uploadedAt  DateTime  @default(now())\n}\n\nmodel ResumeParsed {\n  id          Int       @id @default(autoincrement())\n  candidate   Candidate @relation(fields: [candidateId], references: [id])\n  candidateId Int       @unique\n  text        String    @db.Text\n  keywords    Json?\n}\n\nmodel Interview {\n  id          Int       @id @default(autoincrement())\n  candidate   Candidate @relation(fields: [candidateId], references: [id])\n  candidateId Int\n  scheduledAt DateTime\n  interviewer String\n  status      String    @default(\"scheduled\")\n  createdAt   DateTime  @default(now())\n}\n\nmodel Feedback {\n  id          Int       @id @default(autoincrement())\n  candidate   Candidate @relation(fields: [candidateId], references: [id])\n  candidateId Int\n  interviewer String\n  rating      Int\n  notes       String?\n  createdAt   DateTime  @default(now())\n}\n\nmodel ScoringConfig {\n  id        Int      @id @default(autoincrement())\n  name      String\n  config    Json\n  updatedAt DateTime @updatedAt\n}\n",
  "inlineSchemaHash": "051bf0edce1a025ab357a06f90a4200003901462b11b90ff82ba797860441d10",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Job\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"candidates\",\"kind\":\"object\",\"type\":\"Candidate\",\"relationName\":\"CandidateToJob\"},{\"name\":\"scoringKeywords\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":null},\"Candidate\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"jobId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"job\",\"kind\":\"object\",\"type\":\"Job\",\"relationName\":\"CandidateToJob\"},{\"name\":\"resume\",\"kind\":\"object\",\"type\":\"ResumeFile\",\"relationName\":\"CandidateToResumeFile\"},{\"name\":\"parsedResume\",\"kind\":\"object\",\"type\":\"ResumeParsed\",\"relationName\":\"CandidateToResumeParsed\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"scoreBreakdown\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"interviews\",\"kind\":\"object\",\"type\":\"Interview\",\"relationName\":\"CandidateToInterview\"},{\"name\":\"feedbacks\",\"kind\":\"object\",\"type\":\"Feedback\",\"relationName\":\"CandidateToFeedback\"}],\"dbName\":null},\"ResumeFile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"candidate\",\"kind\":\"object\",\"type\":\"Candidate\",\"relationName\":\"CandidateToResumeFile\"},{\"name\":\"candidateId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"filename\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"path\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mimetype\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"size\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"uploadedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ResumeParsed\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"candidate\",\"kind\":\"object\",\"type\":\"Candidate\",\"relationName\":\"CandidateToResumeParsed\"},{\"name\":\"candidateId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"keywords\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":null},\"Interview\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"candidate\",\"kind\":\"object\",\"type\":\"Candidate\",\"relationName\":\"CandidateToInterview\"},{\"name\":\"candidateId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"scheduledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"interviewer\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Feedback\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"candidate\",\"kind\":\"object\",\"type\":\"Candidate\",\"relationName\":\"CandidateToFeedback\"},{\"name\":\"candidateId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"interviewer\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ScoringConfig\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"config\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

